{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","react_default","a","createElement","onSubmit","addCourse","type","value","current","onChange","updateCourse","required","CourseList","state","isEdit","courseName","renderCourse","className","_this","details","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","react","Component","App","courses","target","push","splice","_this2","courseList","length","map","course","components_CourseList","key","components_CourseForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef1b1efd.chunk.js","sourcesContent":["import React from 'react';\n\nconst CourseForm = (props)=>{\n    return (\n      <form onSubmit={props.addCourse}>\n        <input type=\"text\" value={props.current} onChange={props.updateCourse} required />\n        <button type=\"submit\">Add Course</button>\n      </form>\n    );\n}\n\nexport default CourseForm;","import React, { Component, Fragment } from 'react';\nimport \"../App.css\";\nclass CourseList extends Component {\n\n    state ={\n        isEdit : false,\n        courseName: ''\n    }\n\n    // render Course\n    renderCourse = ()=>{\n        return (\n            <li className=\"elements\">\n                <span>{this.props.details.name}</span>\n                <button onClick={()=>{this.toggleState()}} className=\"btn\">Edit Course</button>\n                <button className=\"btn\" onClick={()=> {this.props.deleteCourse(this.props.index)}}>Delete</button>\n            </li>      \n        )\n    }\n\n\n    // toggleState\n    toggleState = () => {\n        let {isEdit} = this.state;\n        this.setState({\n            isEdit: !isEdit\n        })\n    }\n\n\n    // updateCourseItem\n    updateCourseItem = (e)=> {\n        e.preventDefault();\n        this.props.editCourse(this.props.index, this.input.value );\n        this.toggleState();\n    }\n\n    // render Update Form\n    renderUpdateForm = ()=>{\n        return (\n          <form onSubmit={this.updateCourseItem} className=\"btn\">\n            <input ref={(v) => {this.input = v}} type=\"text\" defaultValue={this.props.details.name} />\n            <button >Update Course</button>\n          </form>\n        );\n  }\n\n \n\n    \n    render() { \n\n        let {isEdit} = this.state;\n\n        return(\n           <Fragment>\n               { isEdit ? this.renderUpdateForm() : this.renderCourse()}\n           </Fragment>\n        )\n    }\n}\n \nexport default CourseList;","import React, {Component} from 'react';\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state ={\n    courses: [\n      { name: \"html\"   },\n      { name: \"CSS\" },\n      { name: \"JS\" }\n    ],\n    current : \"\"\n  }\n\n  // Update Course\n  updateCourse =(e)=>{\n    this.setState({\n      current: e.target.value\n    });\n  }\n\n\n  // Add Course\n  addCourse = (e)=>{\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({name: current})\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }\n\n\n\n  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n  }\n\n\n  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState ({\n      courses\n    })\n  }\n\n\n  \n  \n  render() {\n\n    \n    let {courses} = this.state;\n    let length = courses.length;\n\n    const courseList = length ? (\n      courses.map((course, index) => {\n        return (\n          <CourseList\n            details={course}\n            deleteCourse={this.deleteCourse}\n            courses={this.state.courses}\n            key={index}\n            index={index}\n            editCourse={this.editCourse}\n          />\n        );\n      })\n    ) : (\n      <p> Ther is no Course to show</p>\n    )\n    \n\n    return (\n      <div className=\"App\">\n      <h1>Add Course</h1>\n      <CourseForm current={this.state.current} updateCourse={this.updateCourse} addCourse={this.addCourse}/>\n        \n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}